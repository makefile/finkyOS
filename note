2015年 02月 14日 星期六 00:25:02 CST
尝试开启分页机制，导致无限重启,实验发现SetupPaging这个函数不能放在call它的代码之前，否则导致操作系统无限重启，发现这里的函数的定义都是在调用之后，这难道是nasm的特性？以后再查.
2015年 02月 15日 星期日 15:47:41 CST
标志寄存器（16位FLAGS，32位EFLAGS）用来保存一条指令执行结束后，CPU所处的状态和运算的特征，其中的很多位被称为标志位ZF,OF,SF,CF等等
spurious:假的，伪造的
2015年 02月 16日 星期一 12:42:53 CST
昨晚一晚上在检查代码，由于bochs中运行系统总是重启。糟糕的是自己安装的bochs没有调试功能，bochs的源码也没有，上网不便。而且自己把bochs的所有输出都转到了/dev/null.今天才想起bochs的输出包含寄存器信息，异常信息等，查看发现还是很详细的，有段选择子，段界限等，jmp跳转时检查cs有没有超出范围，LDT的索引有没有超出LDT.limit.关键信息是在hadware reset之前：exception():3rd exception with no resolution,遂上网查询，OSDev Wiki中写道：
The CPU didn't manage to invoke an exception handler and would normally triple fault.This is probably due to a bad IDT register content,or a bad IDT descriptor.Sometimes(but less likely),it can also be due to a severebug in your exception handler code.Check your exception works with "illegal" ASM instructions.
于是我仔细查看idt相关的代码，从它的定义到赋值再到加载，同时测试异常及硬件中断的处理程序，到了最后才发现自己在加载ldt时用了lidt指令，将idt给毁了。现在才发现等宽字体中l，i也难以区分。
虽然话费了很多时间，但收获很丰富。
2015年 02月 18日 星期三 16:21:58 CST
发现键盘处理代码部分CAPS_LOCK键有问题，静态变量caps_lock的值竟然在不断的变化，通过改变这个变量为非静态的或改变这个变量的相对位置，这个值就默认为0了，大小写输入就正常了。遂怀疑是发生了栈溢出，将该变量对应的内存地址的内容改变了。于是想到给用户进程分配栈空间的代码才发现少分配了一个进程的。导致给最后一个进程分配的sp寄存器值为一个负数转成u32变成的很大的整数,但是溢出到哪里去了却不知。
2015年 02月 19日 星期四 16:59:46 CST
大年初一头一天,雪花纷纷。
明白了键盘输入缓冲区中一开始就有一个0xFA的缘故，因为键盘初始化LED灯时往8048编码器的0x60端口发送LED的设置命令0xED，键盘会先回复一个ACK(0xFA)，等待你往0x60端口写入LED参数，低三位控制三个灯。键盘收到后再回复一个ACK，便开始设置。

2015年 02月 21日 星期六 18:25:17 CST
今天除了与串门的歇着，大多时间都在找bug，最后仍未解决：在将get_ticks系统调用改成微内核形式的消息同步机制后，sleep等函数就崩溃了。表现在循环调用get_ticks时调用上几十遍时就发生#GP保护异常，而原来的直接返回ticks的形式的系统调用正常，说明系统调用的汇编入口部分对中断重入的处理不当，猜测是由于新的开中断期间的代码执行时间较长导致重入过多。遂直接将开中断的代码去掉，也就是避免了重入。感觉自定义的软中断的重入处理也没有必要，不像时钟中断。以后有时间再思考解决。

